%{
  #include "structures/RedirectionExpr.h"
  #include "structures/VariableAssignment.h"
  #include "structures/VariableCall.h"
  #include "structures/Program.h"
  #include "structures/PipeExpr.h"
  #include "structures/Node.h"
  #include "structures/Identifier.h"
  #include "structures/Command.h"
  #include "structures/BackTickExpr.h"

  #include <bits/stdc++.h>
  #include <iostream>

  int yylex(void);
  extern "C" int yyparse();
  extern "C" int errors;
  void yyerror (char const *s);
  int errors = 0;
  using namespace std;
%}
// Tokens

%union {
    char* sval;
    BackTickExpr* backtick_expression;
    Command* command;
    Identifier* identifier;
    Assignable* assignable;
    Node* node;
    PipeExpr* pipe_expression;
    Program* program;
    RedirectionExpr* redirection_expression;
    VariableAssignment* variable_assignment;
    VariableCall* variable_call;
}

%start program
%token LAND LOR BAND BOR
%token ASSIGN SC SM GR BT
%token<sval> IDENTIFIER VARIABLE


%type <program> program
%type <command> command
%type <assignable> assignable
%type <variable_assignment> variable_assignment
%type <redirection_expression> redirection_expression
%type <pipe_expression> pipe_expression
%type <backtick_expression> backtick_expression
%type <identifier> identifier
%type <variable_call> variable_call 

%%
program                 : /* blank */ {  }
                        | program command { auto commands = $1->getCommands(); commands.push_back($2);
                            $1->setCommands(commands); }
                        | program pipe_expression { auto commands = $1->getCommands(); commands.push_back($2);
                            $1->setCommands(commands); }
                        | program variable_assignment { auto commands = $1->getCommands(); commands.push_back($2);
                            $1->setCommands(commands); }
                        | program redirection_expression { auto commands = $1->getCommands(); commands.push_back($2);
                            $1->setCommands(commands); }
                        | program SC { $$ = $1; }
                        ;

variable_assignment     : identifier ASSIGN assignable { $$ = new VariableAssignment($1->getIdentifier(), $3); 
                                /* Work with variable values */ }
                        ;

redirection_expression  : redirection_expression GR assignable { $1->setOutput($3); $$ = $1; }
                        | redirection_expression SM assignable { $1->setInput($3); $$ = $1; }
                        | command GR assignable { $$ = new RedirectionExpr($1, nullptr, $3); }
                        | command SM assignable { $$ = new RedirectionExpr($1, $3, nullptr); }
                        ;

pipe_expression         : pipe_expression BOR command { auto pipes = $1->getPipes(); pipes.push_back($3); 
                            $1->setPipes(pipes); $$ = $1; }
                        | command BOR command { std::vector<Node*> pipes; pipes.push_back($1);pipes.push_back($3);
                            $$ = new PipeExpr(pipes); }
                        ;

command                 : command assignable { auto args = $1->getArguments(); args.push_back($2);
                            $1->setArguments(args); $$ = $1; }
                        | assignable { std::vector<Node*> args; 
                            $$ = new Command($1, args); }
                        ;

assignable              : backtick_expression { $$ = $1; }
                        | identifier { $$ = $1; }
                        | variable_call { $$ = $1; }
                        ;

backtick_expression     : BT program BT { $$ = new BackTickExpr($2); }
                        ;

identifier              : IDENTIFIER { $$ = new Identifier(string($1)); }
                        ;

variable_call           : VARIABLE { $$ = new VariableCall(string($1)); }
                        ;
%%

void yyerror (char const *s)
{
    errors++;
	  printf("Error: %s\n", s);
}

int main(int argc, char *argv[])
{
  	do {
  		  yyparse();
  	} while (true);
  	return 0;
}
